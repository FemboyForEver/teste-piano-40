shared.stop = true
wait(1)
shared.stop = false

shared.nospacedelay = shared.nospacedelay or false

local str = shared.scr or "qw[er]ty"
local FinishTime = shared.ftime or 10

local vim = game:GetService("VirtualInputManager")

local nstr = string.gsub(str,"[[\]\n]","")

-- Utilisation d'un délai ajusté pour donner une sensation plus fluide, inspirée de la musique classique
local delay = shared.tempo and (FinishTime / (string.len(nstr) / shared.tempo)) or shared.delay or FinishTime / (string.len(nstr) / 1.05)

local shifting = false

local function doshift(key)
    if key:upper() ~= key then return end
    if tonumber(key) then return end
    vim:SendKeyEvent(true, 304, false, nil)
    shifting = true
end

local function endshift()
    if not shifting then return end
    vim:SendKeyEvent(false, 304, false, nil)
    shifting = false
end

local queue = ""
local rem = true
local insideBrackets = false
local pressedKeys = {}

-- Fonction pour introduire des variations dans les délais, créant une sensation de phrasé musical
local function musicalDelay(baseDelay)
    local variation = math.random() * 0.05  -- Variation subtile entre 0 et 5%
    local dynamicChange = math.random() * 0.1 - 0.05  -- Ajout d'une variation pour rendre certaines notes plus rapides ou lentes
    return baseDelay + variation + dynamicChange
end

for i=1, #str do
    if shared.stop == true then return end

    local c = str:sub(i, i)

    if c == "[" then
        rem = false
        insideBrackets = true
        queue = ""
        continue
    elseif c == "]" then
        rem = true
        insideBrackets = false

        if queue ~= "" then
            for ii = 1, #queue do
                local cc = queue:sub(ii, ii)
                table.insert(pressedKeys, cc)
            end
            pcall(function()
                for _, cc in ipairs(pressedKeys) do
                    doshift(cc)
                    vim:SendKeyEvent(true, string.byte(cc:lower()), false, nil)
                end
            end)
            wait(0)  -- Jouer les notes simultanément
            pcall(function()
                for _, cc in ipairs(pressedKeys) do
                    vim:SendKeyEvent(false, string.byte(cc:lower()), false, nil)
                    endshift()
                end
            end)
        end

        queue = ""
        pressedKeys = {}
        continue
    elseif c == " " or string.byte(c) == 10 then
        if shared.nospacedelay then continue end
        wait(musicalDelay(delay))  -- Appliquer le délai musical entre les espaces
        continue
    elseif c == "|" or c == "-" then
        wait(musicalDelay(delay * 2))  -- Pause un peu plus longue avec un délai dynamique
        continue
    end

    if not rem then
        queue = queue .. c
        continue
    end

    pcall(function()
        doshift(c)
        vim:SendKeyEvent(true, string.byte(c:lower()), false, nil)
        wait()
        vim:SendKeyEvent(false, string.byte(c:lower()), false, nil)
        endshift()
    end)

    wait(musicalDelay(delay))  -- Appliquer le délai musical entre les touches
end
