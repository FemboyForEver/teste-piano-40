shared.stop = true
wait(1)
shared.stop = false

shared.nospacedelay = shared.nospacedelay or false

local str = shared.scr or "qw[er]ty"
local FinishTime = shared.ftime or 10
local vim = game:GetService("VirtualInputManager")

local nstr = string.gsub(str, "[[\]\n]", "")

local delay = shared.tempo and (6 / shared.tempo) or shared.delay or FinishTime / (string.len(nstr) / 1.05)

print("Finishing in", math.floor((delay * #nstr) / 60), "minute/s", tostring(tonumber(tostring((delay * #nstr) / 60):sub(3, 8)) * 60):sub(1, 2), "second/s")

local shifting = false

local function doshift(key)
    if key:upper() ~= key then return end
    if tonumber(key) then return end
    
    vim:SendKeyEvent(true, 304, false, nil)
    shifting = true
end

local function endshift()
    if not shifting then return end

    vim:SendKeyEvent(false, 304, false, nil)
    shifting = false
end

local queue = ""
local rem = true

local NOTE_MAP = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm"
local UPPER_MAP = "!@ $%^ *( QWE TY IOP SD GHJ LZ CVB"
local LOWER_MAP = "1234567890qwertyuiopasdfghjklzxcvbnm"

local function GetKey(pitch)
    local idx = (pitch + 1 - 36)
    if (idx > #NOTE_MAP or idx < 1) then
        return
    else
        local key = NOTE_MAP:sub(idx, idx)
        return key, UPPER_MAP:find(key, 1, true)
    end
end

local function Press(pitch)
    local key, upperMapIdx = GetKey(pitch)
    if (not key) then return end
    if (upperMapIdx) then
        local keyToPress = LOWER_MAP:sub(upperMapIdx, upperMapIdx)
        vim:SendKeyEvent(true, string.byte(keyToPress:upper()), false, nil)
        endshift()
    else
        vim:SendKeyEvent(true, string.byte(key:upper()), false, nil)
    end
end

local function Release(pitch)
    local key, upperMapIdx = GetKey(pitch)
    if (not key) then return end
    if (upperMapIdx) then
        local keyToPress = LOWER_MAP:sub(upperMapIdx, upperMapIdx)
        vim:SendKeyEvent(false, string.byte(keyToPress:upper()), false, nil)
    else
        vim:SendKeyEvent(false, string.byte(key:upper()), false, nil)
    end
end

local function Hold(pitch, duration)
    Press(pitch)
    wait(duration)
    Release(pitch)
end

for i = 1, #str do
    if shared.stop == true then return end

    local c = str:sub(i, i)

    if c == "[" then
        rem = false
        continue
    elseif c == "]" then
        rem = true
        if string.find(queue, " ") then
            for ii = 1, #queue do
                local cc = queue:sub(ii, ii)
                pcall(function()
                    doshift(cc)
                    Press(cc:lower())
                    wait(delay / 2)
                    Release(cc:lower())
                    endshift()
                end)
            end
        else
            for ii = 1, #queue do
                local cc = queue:sub(ii, ii)
                pcall(function()
                    doshift(cc)
                    Press(cc:lower())
                    endshift()
                end)
                wait()
            end
            wait()
            for ii = 1, #queue do
                local cc = queue:sub(ii, ii)
                pcall(function()
                    doshift(cc)
                    Release(cc:lower())
                    endshift()
                end)
                wait()
            end
        end
        queue = ""
        continue
    elseif c == " " or string.byte(c) == 10 then
        if shared.nospacedelay then continue end
        wait(delay)
        continue
    elseif c == "|" or c == "-" then
        wait(delay * 2)
        continue
    end

    if not rem then
        queue = queue .. c
        continue
    end

    pcall(function()
        doshift(c)
        Press(c:lower())
        wait()
        Release(c:lower())
        endshift()
    end)

    wait(delay)
end
