shared.stop = true
wait(1)
shared.stop = false

shared.nospacedelay = shared.nospacedelay or false

local vim = game:GetService("VirtualInputManager")

local str = shared.scr or "qw[er]ty"
local FinishTime = shared.ftime or 10

local nstr = string.gsub(str, "[%[%]%s]", "")
local delay = shared.tempo and (6 / shared.tempo) or shared.delay or (FinishTime / (#nstr / 1.05))

shared.ftime = (delay * #nstr) / 60
print("Finishing in", math.floor(shared.ftime), "minute/s", tostring(tonumber(tostring(shared.ftime):sub(3, 8)) * 60):sub(1, 2), "second/s")

local shifting = false

local function doshift(key)
    if key:upper() ~= key then return end
    if tonumber(key) then return end

    vim:SendKeyEvent(true, 304, false, nil)
    shifting = true
end

local function endshift()
    if not shifting then return end
    vim:SendKeyEvent(false, 304, false, nil)
    shifting = false
end

local queue = ""
local rem = true
local simultaneousNotes = {}

local function GetKey(pitch)
    local NOTE_MAP = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm"
    local idx = NOTE_MAP:find(pitch, 1, true)
    return NOTE_MAP:sub(idx, idx), idx
end

for i = 1, #str do
    if shared.stop == true then return end

    local c = str:sub(i, i)

    if c == "[" then
        rem = false
        queue = ""
        continue
    elseif c == "]" then
        rem = true
        table.insert(simultaneousNotes, queue)
        queue = ""
        continue
    elseif c == " " or string.byte(c) == 10 then
        if shared.nospacedelay then continue end
        wait(delay)
        continue
    elseif c == "|" or c == "-" then
        wait(delay * 2)
        continue
    end

    if not rem then
        queue = queue .. c
        continue
    end

    local key, upperMapIdx = GetKey(c)
    pcall(function()
        doshift(c)
        vim:SendKeyEvent(true, string.byte(key:lower()), false, nil)
        wait(delay)
        vim:SendKeyEvent(false, string.byte(key:lower()), false, nil)
        endshift()
    end)

    wait(delay)
end

for _, noteSet in ipairs(simultaneousNotes) do
    local keyThreads = {}
    for ii = 1, #noteSet do
        local cc = noteSet:sub(ii, ii)
        table.insert(keyThreads, pcall(function()
            doshift(cc)
            local key = GetKey(cc)
            vim:SendKeyEvent(true, string.byte(key:lower()), false, nil)
        end))
    end
    wait(delay / 2)
    for ii = 1, #noteSet do
        local cc = noteSet:sub(ii, ii)
        pcall(function()
            vim:SendKeyEvent(false, string.byte(cc:lower()), false, nil)
            endshift()
        end)
    end
    wait(delay / 2)
end
